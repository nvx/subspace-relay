// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: subspacerelay/subspacerelay.proto

package subspacerelaypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PayloadType int32

const (
	PayloadType_PAYLOAD_TYPE_UNSPECIFIED PayloadType = 0
	// Relay device is attached to a HID reader or SAM and can exchange Artemis payloads
	PayloadType_PAYLOAD_TYPE_ARTEMIS PayloadType = 1
	// Relay device is attached to a Proxmark3 with the cardhopper standalone mode to emulate a 14443a-4 card
	PayloadType_PAYLOAD_TYPE_CARDHOPPER PayloadType = 2
	// Relay device is attached to a PCSC-like reader and can exchange APDUs to a smart card
	PayloadType_PAYLOAD_TYPE_PCSC_READER PayloadType = 3
	// Relay device is attached to a PCSC-like reader that supports control commands
	PayloadType_PAYLOAD_TYPE_PCSC_READER_CONTROL PayloadType = 5
	// Relay device is emulating a smart card and can respond to APDUs from a reader
	PayloadType_PAYLOAD_TYPE_PCSC_CARD PayloadType = 4
)

// Enum value maps for PayloadType.
var (
	PayloadType_name = map[int32]string{
		0: "PAYLOAD_TYPE_UNSPECIFIED",
		1: "PAYLOAD_TYPE_ARTEMIS",
		2: "PAYLOAD_TYPE_CARDHOPPER",
		3: "PAYLOAD_TYPE_PCSC_READER",
		5: "PAYLOAD_TYPE_PCSC_READER_CONTROL",
		4: "PAYLOAD_TYPE_PCSC_CARD",
	}
	PayloadType_value = map[string]int32{
		"PAYLOAD_TYPE_UNSPECIFIED":         0,
		"PAYLOAD_TYPE_ARTEMIS":             1,
		"PAYLOAD_TYPE_CARDHOPPER":          2,
		"PAYLOAD_TYPE_PCSC_READER":         3,
		"PAYLOAD_TYPE_PCSC_READER_CONTROL": 5,
		"PAYLOAD_TYPE_PCSC_CARD":           4,
	}
)

func (x PayloadType) Enum() *PayloadType {
	p := new(PayloadType)
	*p = x
	return p
}

func (x PayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_subspacerelay_subspacerelay_proto_enumTypes[0].Descriptor()
}

func (PayloadType) Type() protoreflect.EnumType {
	return &file_subspacerelay_subspacerelay_proto_enumTypes[0]
}

func (x PayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayloadType.Descriptor instead.
func (PayloadType) EnumDescriptor() ([]byte, []int) {
	return file_subspacerelay_subspacerelay_proto_rawDescGZIP(), []int{0}
}

type ConnectionType int32

const (
	ConnectionType_CONNECTION_TYPE_UNSPECIFIED ConnectionType = 0
	ConnectionType_CONNECTION_TYPE_PCSC        ConnectionType = 1
	ConnectionType_CONNECTION_TYPE_PCSC_DIRECT ConnectionType = 6
	ConnectionType_CONNECTION_TYPE_UART        ConnectionType = 2
	ConnectionType_CONNECTION_TYPE_OSDP        ConnectionType = 3
	ConnectionType_CONNECTION_TYPE_NFC         ConnectionType = 4
	ConnectionType_CONNECTION_TYPE_BLE         ConnectionType = 5
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSPECIFIED",
		1: "CONNECTION_TYPE_PCSC",
		6: "CONNECTION_TYPE_PCSC_DIRECT",
		2: "CONNECTION_TYPE_UART",
		3: "CONNECTION_TYPE_OSDP",
		4: "CONNECTION_TYPE_NFC",
		5: "CONNECTION_TYPE_BLE",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSPECIFIED": 0,
		"CONNECTION_TYPE_PCSC":        1,
		"CONNECTION_TYPE_PCSC_DIRECT": 6,
		"CONNECTION_TYPE_UART":        2,
		"CONNECTION_TYPE_OSDP":        3,
		"CONNECTION_TYPE_NFC":         4,
		"CONNECTION_TYPE_BLE":         5,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_subspacerelay_subspacerelay_proto_enumTypes[1].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_subspacerelay_subspacerelay_proto_enumTypes[1]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_subspacerelay_subspacerelay_proto_rawDescGZIP(), []int{1}
}

type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*Message_Payload
	//	*Message_RequestClientInfo
	//	*Message_ClientInfo
	//	*Message_Log
	//	*Message_Reconnect
	//	*Message_Disconnect
	Message       isMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_subspacerelay_subspacerelay_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetMessage() isMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Message) GetPayload() *Payload {
	if x != nil {
		if x, ok := x.Message.(*Message_Payload); ok {
			return x.Payload
		}
	}
	return nil
}

func (x *Message) GetRequestClientInfo() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Message.(*Message_RequestClientInfo); ok {
			return x.RequestClientInfo
		}
	}
	return nil
}

func (x *Message) GetClientInfo() *ClientInfo {
	if x != nil {
		if x, ok := x.Message.(*Message_ClientInfo); ok {
			return x.ClientInfo
		}
	}
	return nil
}

func (x *Message) GetLog() *Log {
	if x != nil {
		if x, ok := x.Message.(*Message_Log); ok {
			return x.Log
		}
	}
	return nil
}

func (x *Message) GetReconnect() *Reconnect {
	if x != nil {
		if x, ok := x.Message.(*Message_Reconnect); ok {
			return x.Reconnect
		}
	}
	return nil
}

func (x *Message) GetDisconnect() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Message.(*Message_Disconnect); ok {
			return x.Disconnect
		}
	}
	return nil
}

type isMessage_Message interface {
	isMessage_Message()
}

type Message_Payload struct {
	Payload *Payload `protobuf:"bytes,1,opt,name=payload,proto3,oneof"`
}

type Message_RequestClientInfo struct {
	RequestClientInfo *emptypb.Empty `protobuf:"bytes,2,opt,name=request_client_info,json=requestClientInfo,proto3,oneof"`
}

type Message_ClientInfo struct {
	ClientInfo *ClientInfo `protobuf:"bytes,3,opt,name=client_info,json=clientInfo,proto3,oneof"`
}

type Message_Log struct {
	Log *Log `protobuf:"bytes,4,opt,name=log,proto3,oneof"`
}

type Message_Reconnect struct {
	// most connections are established automatically, or are driven ia external means (eg cardhopper entering a field)
	// but some remote-driven interactions (eg emulating a card) are still initiated from the local side (eg BLE)
	Reconnect *Reconnect `protobuf:"bytes,5,opt,name=reconnect,proto3,oneof"`
}

type Message_Disconnect struct {
	Disconnect *emptypb.Empty `protobuf:"bytes,6,opt,name=disconnect,proto3,oneof"`
}

func (*Message_Payload) isMessage_Message() {}

func (*Message_RequestClientInfo) isMessage_Message() {}

func (*Message_ClientInfo) isMessage_Message() {}

func (*Message_Log) isMessage_Message() {}

func (*Message_Reconnect) isMessage_Message() {}

func (*Message_Disconnect) isMessage_Message() {}

type Payload struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Payload     []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	PayloadType PayloadType            `protobuf:"varint,2,opt,name=payload_type,json=payloadType,proto3,enum=subspacerelay.PayloadType" json:"payload_type,omitempty"`
	Sequence    uint32                 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// control is used for PCSC control codes, only uint16 values are valid
	Control       *uint32 `protobuf:"varint,4,opt,name=control,proto3,oneof" json:"control,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Payload) Reset() {
	*x = Payload{}
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_subspacerelay_subspacerelay_proto_rawDescGZIP(), []int{1}
}

func (x *Payload) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Payload) GetPayloadType() PayloadType {
	if x != nil {
		return x.PayloadType
	}
	return PayloadType_PAYLOAD_TYPE_UNSPECIFIED
}

func (x *Payload) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Payload) GetControl() uint32 {
	if x != nil && x.Control != nil {
		return *x.Control
	}
	return 0
}

type Reconnect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UseShortcut   bool                   `protobuf:"varint,1,opt,name=use_shortcut,json=useShortcut,proto3" json:"use_shortcut,omitempty"`
	Uid           []byte                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Ats           []byte                 `protobuf:"bytes,3,opt,name=ats,proto3" json:"ats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reconnect) Reset() {
	*x = Reconnect{}
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reconnect) ProtoMessage() {}

func (x *Reconnect) ProtoReflect() protoreflect.Message {
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reconnect.ProtoReflect.Descriptor instead.
func (*Reconnect) Descriptor() ([]byte, []int) {
	return file_subspacerelay_subspacerelay_proto_rawDescGZIP(), []int{2}
}

func (x *Reconnect) GetUseShortcut() bool {
	if x != nil {
		return x.UseShortcut
	}
	return false
}

func (x *Reconnect) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *Reconnect) GetAts() []byte {
	if x != nil {
		return x.Ats
	}
	return nil
}

type ClientInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SupportedPayloadTypes []PayloadType          `protobuf:"varint,1,rep,packed,name=supported_payload_types,json=supportedPayloadTypes,proto3,enum=subspacerelay.PayloadType" json:"supported_payload_types,omitempty"`
	ConnectionType        ConnectionType         `protobuf:"varint,5,opt,name=connection_type,json=connectionType,proto3,enum=subspacerelay.ConnectionType" json:"connection_type,omitempty"`
	// atr is only present when PAYLOAD_TYPE_PCSC_READER is in supported_payload_types
	Atr []byte `protobuf:"bytes,2,opt,name=atr,proto3" json:"atr,omitempty"`
	// device_name is only present when available, eg for PCSC readers or when connected to a BLE peripheral
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// device_address is only present when available, eg when connected to a BLE peripheral
	DeviceAddress []byte `protobuf:"bytes,4,opt,name=device_address,json=deviceAddress,proto3" json:"device_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_subspacerelay_subspacerelay_proto_rawDescGZIP(), []int{3}
}

func (x *ClientInfo) GetSupportedPayloadTypes() []PayloadType {
	if x != nil {
		return x.SupportedPayloadTypes
	}
	return nil
}

func (x *ClientInfo) GetConnectionType() ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return ConnectionType_CONNECTION_TYPE_UNSPECIFIED
}

func (x *ClientInfo) GetAtr() []byte {
	if x != nil {
		return x.Atr
	}
	return nil
}

func (x *ClientInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ClientInfo) GetDeviceAddress() []byte {
	if x != nil {
		return x.DeviceAddress
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_subspacerelay_subspacerelay_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_subspacerelay_subspacerelay_proto_rawDescGZIP(), []int{4}
}

func (x *Log) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_subspacerelay_subspacerelay_proto protoreflect.FileDescriptor

const file_subspacerelay_subspacerelay_proto_rawDesc = "" +
	"\n" +
	"!subspacerelay/subspacerelay.proto\x12\rsubspacerelay\x1a\x1bgoogle/protobuf/empty.proto\"\xec\x02\n" +
	"\aMessage\x122\n" +
	"\apayload\x18\x01 \x01(\v2\x16.subspacerelay.PayloadH\x00R\apayload\x12H\n" +
	"\x13request_client_info\x18\x02 \x01(\v2\x16.google.protobuf.EmptyH\x00R\x11requestClientInfo\x12<\n" +
	"\vclient_info\x18\x03 \x01(\v2\x19.subspacerelay.ClientInfoH\x00R\n" +
	"clientInfo\x12&\n" +
	"\x03log\x18\x04 \x01(\v2\x12.subspacerelay.LogH\x00R\x03log\x128\n" +
	"\treconnect\x18\x05 \x01(\v2\x18.subspacerelay.ReconnectH\x00R\treconnect\x128\n" +
	"\n" +
	"disconnect\x18\x06 \x01(\v2\x16.google.protobuf.EmptyH\x00R\n" +
	"disconnectB\t\n" +
	"\amessage\"\xa9\x01\n" +
	"\aPayload\x12\x18\n" +
	"\apayload\x18\x01 \x01(\fR\apayload\x12=\n" +
	"\fpayload_type\x18\x02 \x01(\x0e2\x1a.subspacerelay.PayloadTypeR\vpayloadType\x12\x1a\n" +
	"\bsequence\x18\x03 \x01(\rR\bsequence\x12\x1d\n" +
	"\acontrol\x18\x04 \x01(\rH\x00R\acontrol\x88\x01\x01B\n" +
	"\n" +
	"\b_control\"R\n" +
	"\tReconnect\x12!\n" +
	"\fuse_shortcut\x18\x01 \x01(\bR\vuseShortcut\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\fR\x03uid\x12\x10\n" +
	"\x03ats\x18\x03 \x01(\fR\x03ats\"\x82\x02\n" +
	"\n" +
	"ClientInfo\x12R\n" +
	"\x17supported_payload_types\x18\x01 \x03(\x0e2\x1a.subspacerelay.PayloadTypeR\x15supportedPayloadTypes\x12F\n" +
	"\x0fconnection_type\x18\x05 \x01(\x0e2\x1d.subspacerelay.ConnectionTypeR\x0econnectionType\x12\x10\n" +
	"\x03atr\x18\x02 \x01(\fR\x03atr\x12\x1f\n" +
	"\vdevice_name\x18\x03 \x01(\tR\n" +
	"deviceName\x12%\n" +
	"\x0edevice_address\x18\x04 \x01(\fR\rdeviceAddress\"\x1f\n" +
	"\x03Log\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage*\xc2\x01\n" +
	"\vPayloadType\x12\x1c\n" +
	"\x18PAYLOAD_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14PAYLOAD_TYPE_ARTEMIS\x10\x01\x12\x1b\n" +
	"\x17PAYLOAD_TYPE_CARDHOPPER\x10\x02\x12\x1c\n" +
	"\x18PAYLOAD_TYPE_PCSC_READER\x10\x03\x12$\n" +
	" PAYLOAD_TYPE_PCSC_READER_CONTROL\x10\x05\x12\x1a\n" +
	"\x16PAYLOAD_TYPE_PCSC_CARD\x10\x04*\xd2\x01\n" +
	"\x0eConnectionType\x12\x1f\n" +
	"\x1bCONNECTION_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14CONNECTION_TYPE_PCSC\x10\x01\x12\x1f\n" +
	"\x1bCONNECTION_TYPE_PCSC_DIRECT\x10\x06\x12\x18\n" +
	"\x14CONNECTION_TYPE_UART\x10\x02\x12\x18\n" +
	"\x14CONNECTION_TYPE_OSDP\x10\x03\x12\x17\n" +
	"\x13CONNECTION_TYPE_NFC\x10\x04\x12\x17\n" +
	"\x13CONNECTION_TYPE_BLE\x10\x05b\x06proto3"

var (
	file_subspacerelay_subspacerelay_proto_rawDescOnce sync.Once
	file_subspacerelay_subspacerelay_proto_rawDescData []byte
)

func file_subspacerelay_subspacerelay_proto_rawDescGZIP() []byte {
	file_subspacerelay_subspacerelay_proto_rawDescOnce.Do(func() {
		file_subspacerelay_subspacerelay_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_subspacerelay_subspacerelay_proto_rawDesc), len(file_subspacerelay_subspacerelay_proto_rawDesc)))
	})
	return file_subspacerelay_subspacerelay_proto_rawDescData
}

var file_subspacerelay_subspacerelay_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_subspacerelay_subspacerelay_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_subspacerelay_subspacerelay_proto_goTypes = []any{
	(PayloadType)(0),      // 0: subspacerelay.PayloadType
	(ConnectionType)(0),   // 1: subspacerelay.ConnectionType
	(*Message)(nil),       // 2: subspacerelay.Message
	(*Payload)(nil),       // 3: subspacerelay.Payload
	(*Reconnect)(nil),     // 4: subspacerelay.Reconnect
	(*ClientInfo)(nil),    // 5: subspacerelay.ClientInfo
	(*Log)(nil),           // 6: subspacerelay.Log
	(*emptypb.Empty)(nil), // 7: google.protobuf.Empty
}
var file_subspacerelay_subspacerelay_proto_depIdxs = []int32{
	3, // 0: subspacerelay.Message.payload:type_name -> subspacerelay.Payload
	7, // 1: subspacerelay.Message.request_client_info:type_name -> google.protobuf.Empty
	5, // 2: subspacerelay.Message.client_info:type_name -> subspacerelay.ClientInfo
	6, // 3: subspacerelay.Message.log:type_name -> subspacerelay.Log
	4, // 4: subspacerelay.Message.reconnect:type_name -> subspacerelay.Reconnect
	7, // 5: subspacerelay.Message.disconnect:type_name -> google.protobuf.Empty
	0, // 6: subspacerelay.Payload.payload_type:type_name -> subspacerelay.PayloadType
	0, // 7: subspacerelay.ClientInfo.supported_payload_types:type_name -> subspacerelay.PayloadType
	1, // 8: subspacerelay.ClientInfo.connection_type:type_name -> subspacerelay.ConnectionType
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_subspacerelay_subspacerelay_proto_init() }
func file_subspacerelay_subspacerelay_proto_init() {
	if File_subspacerelay_subspacerelay_proto != nil {
		return
	}
	file_subspacerelay_subspacerelay_proto_msgTypes[0].OneofWrappers = []any{
		(*Message_Payload)(nil),
		(*Message_RequestClientInfo)(nil),
		(*Message_ClientInfo)(nil),
		(*Message_Log)(nil),
		(*Message_Reconnect)(nil),
		(*Message_Disconnect)(nil),
	}
	file_subspacerelay_subspacerelay_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_subspacerelay_subspacerelay_proto_rawDesc), len(file_subspacerelay_subspacerelay_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_subspacerelay_subspacerelay_proto_goTypes,
		DependencyIndexes: file_subspacerelay_subspacerelay_proto_depIdxs,
		EnumInfos:         file_subspacerelay_subspacerelay_proto_enumTypes,
		MessageInfos:      file_subspacerelay_subspacerelay_proto_msgTypes,
	}.Build()
	File_subspacerelay_subspacerelay_proto = out.File
	file_subspacerelay_subspacerelay_proto_goTypes = nil
	file_subspacerelay_subspacerelay_proto_depIdxs = nil
}
